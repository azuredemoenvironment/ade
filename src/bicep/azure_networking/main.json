{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.9.1.41621",
      "templateHash": "16357736956323601798"
    }
  },
  "parameters": {
    "appEnvironment": {
      "type": "string",
      "metadata": {
        "description": "The application environment (workload, environment, location)."
      }
    },
    "deployAzureFirewall": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Azure Firewall if value is set to true."
      }
    },
    "deploymentDate": {
      "type": "string",
      "defaultValue": "[utcNow('yyyy-MM-dd')]",
      "metadata": {
        "description": "The date of the resource deployment."
      }
    },
    "deployVpnGateway": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Azure VPN Gateway is value is set to true."
      }
    },
    "localNetworkGatewayAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the on-premises network."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location for all resources."
      }
    },
    "managementResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Management Resource Group."
      }
    },
    "ownerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the owner of the deployment."
      }
    },
    "securityResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Security Resource Group."
      }
    },
    "sourceAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The public IP address of the on-premises network."
      }
    }
  },
  "variables": {
    "$fxv#0": [
      {
        "name": "nsg-ade-bfett-eus-adeAppSql",
        "properties": {}
      },
      {
        "name": "nsg-ade-bfett-eus-adeApp-vmss",
        "properties": {}
      },
      {
        "name": "nsg-ade-bfett-eus-adeApp-vm",
        "properties": {}
      },
      {
        "name": "nsg-ade-bfett-eus-adeWeb-vmss",
        "properties": {}
      },
      {
        "name": "nsg-ade-bfett-eus-adeWeb-vm",
        "properties": {}
      },
      {
        "name": "nsg-ade-bfett-eus-applicationGateway",
        "properties": {
          "securityRules": [
            {
              "name": "Gateway_Manager_Inbound",
              "properties": {
                "description": "Allow Gateway Manager Access",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "65200-65535",
                "sourceAddressPrefix": "GatewayManager",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "HTTP_Inbound",
              "properties": {
                "description": "Allow HTTP Inbound",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "80",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 200,
                "direction": "Inbound"
              }
            },
            {
              "name": "HTTPS_Inbound",
              "properties": {
                "description": "Allow HTTPS Inbound",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 300,
                "direction": "Inbound"
              }
            }
          ]
        }
      },
      {
        "name": "nsg-ade-bfett-eus-bastion",
        "properties": {
          "securityRules": [
            {
              "name": "HTTPS_Inbound",
              "properties": {
                "description": "Allow HTTPS Access from Current Location",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "73.109.46.136",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "Gateway_Manager_Inbound",
              "properties": {
                "description": "Allow Gateway Manager Access",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "GatewayManager",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 200,
                "direction": "Inbound"
              }
            },
            {
              "name": "SSH_RDP_Outbound",
              "properties": {
                "description": "Allow SSH and RDP Outbound",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRanges": [
                  "22",
                  "3389"
                ],
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 100,
                "direction": "Outbound"
              }
            },
            {
              "name": "Azure_Cloud_Outbound",
              "properties": {
                "description": "Allow Azure Cloud Outbound",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "AzureCloud",
                "access": "Allow",
                "priority": 200,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "name": "nsg-ade-bfett-eus-dataIngestorService",
        "properties": {}
      },
      {
        "name": "nsg-ade-bfett-eus-dataReporterService",
        "properties": {}
      },
      {
        "name": "nsg-ade-bfett-eus-eventIngestorService",
        "properties": {}
      },
      {
        "name": "nsg-ade-bfett-eus-inspectorGadgetSql",
        "properties": {}
      },
      {
        "name": "nsg-ade-bfett-eus-management",
        "properties": {
          "securityRules": [
            {
              "name": "RDP_Inbound",
              "properties": {
                "description": "Allow RDP Access from Current Location",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "3389",
                "sourceAddressPrefix": "73.109.46.136",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            }
          ]
        }
      },
      {
        "name": "nsg-ade-bfett-eus-userService",
        "properties": {}
      },
      {
        "name": "nsg-ade-bfett-eus-vnetIntegration",
        "properties": {}
      }
    ],
    "$fxv#1": [
      {
        "name": "snet-ade-bfett-eus-applicationGateway",
        "properties": {
          "addressPrefix": "10.101.11.0/24",
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[5].resourceId]"
          },
          "serviceEndpoints": [
            {
              "service": "Microsoft.Web"
            }
          ]
        }
      },
      {
        "name": "AzureBastionSubnet",
        "properties": {
          "addressPrefix": "10.101.21.0/24",
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[6].resourceId]"
          }
        }
      },
      {
        "name": "AzureFirewallSubnet",
        "properties": {
          "addressPrefix": "10.101.1.0/24"
        }
      },
      {
        "name": "GatewaySubnet",
        "properties": {
          "addressPrefix": "10.101.255.0/24"
        }
      },
      {
        "name": "snet-ade-bfett-eus-management",
        "properties": {
          "addressPrefix": "10.101.31.0/24",
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[11].resourceId]"
          }
        }
      }
    ],
    "$fxv#2": [
      {
        "name": "snet-ade-bfett-eus-adeApp-aks",
        "properties": {
          "addressPrefix": "10.102.100.0/23",
          "serviceEndpoints": [
            {
              "service": "Microsoft.ContainerRegistry"
            }
          ]
        }
      },
      {
        "name": "snet-ade-bfett-eus-adeAppSql",
        "properties": {
          "addressPrefix": "10.102.160.0/24",
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[0].resourceId]"
          },
          "privateEndpointNetworkPolicies": "Enabled"
        }
      },
      {
        "name": "snet-ade-bfett-eus-adeApp-vmss",
        "properties": {
          "addressPrefix": "10.102.12.0/24",
          "natGateway": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'natGatewayDeployment')).outputs.natGatewayId.value]"
          },
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[1].resourceId]"
          },
          "serviceEndpoints": [
            {
              "service": "Microsoft.Sql"
            }
          ]
        }
      },
      {
        "name": "snet-ade-bfett-eus-adeApp-vm",
        "properties": {
          "addressPrefix": "10.102.2.0/24",
          "natGateway": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'natGatewayDeployment')).outputs.natGatewayId.value]"
          },
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[2].resourceId]"
          },
          "serviceEndpoints": [
            {
              "service": "Microsoft.Sql"
            }
          ]
        }
      },
      {
        "name": "snet-ade-bfett-eus-adeWeb-vmss",
        "properties": {
          "addressPrefix": "10.102.11.0/24",
          "natGateway": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'natGatewayDeployment')).outputs.natGatewayId.value]"
          },
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[3].resourceId]"
          },
          "serviceEndpoints": [
            {
              "service": "Microsoft.Sql"
            }
          ]
        }
      },
      {
        "name": "snet-ade-bfett-eus-adeWeb-vm",
        "properties": {
          "addressPrefix": "10.102.1.0/24",
          "natGateway": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'natGatewayDeployment')).outputs.natGatewayId.value]"
          },
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[4].resourceId]"
          },
          "serviceEndpoints": [
            {
              "service": "Microsoft.Sql"
            }
          ]
        }
      },
      {
        "name": "snet-ade-bfett-eus-dataIngestorService",
        "properties": {
          "addressPrefix": "10.102.152.0/24",
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[7].resourceId]"
          },
          "privateEndpointNetworkPolicies": "Enabled"
        }
      },
      {
        "name": "snet-ade-bfett-eus-dataReporterService",
        "properties": {
          "addressPrefix": "10.102.153.0/24",
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[8].resourceId]"
          },
          "privateEndpointNetworkPolicies": "Enabled"
        }
      },
      {
        "name": "snet-ade-bfett-eus-eventIngestorService",
        "properties": {
          "addressPrefix": "10.102.154.0/24",
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[9].resourceId]"
          },
          "privateEndpointNetworkPolicies": "Enabled"
        }
      },
      {
        "name": "snet-ade-bfett-eus-inspectorGadgetSql",
        "properties": {
          "addressPrefix": "10.102.161.0/24",
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[10].resourceId]"
          },
          "privateEndpointNetworkPolicies": "Enabled"
        }
      },
      {
        "name": "snet-ade-bfett-eus-userService",
        "properties": {
          "addressPrefix": "10.102.151.0/24",
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[12].resourceId]"
          },
          "privateEndpointNetworkPolicies": "Enabled"
        }
      },
      {
        "name": "snet-ade-bfett-eus-vnetIntegration",
        "properties": {
          "addressPrefix": "10.102.201.0/24",
          "delegations": [
            {
              "name": "appServicePlanDelegation",
              "properties": {
                "serviceName": "Microsoft.Web/serverFarms"
              }
            }
          ],
          "networkSecurityGroup": {
            "id": "[[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value[13].resourceId]"
          },
          "privateEndpointNetworkPolicies": "Enabled"
        }
      }
    ],
    "appServicePrivateDnsZoneName": "privatelink.azurewebsites.net",
    "azureBastionName": "[format('bastion-{0}-001', parameters('appEnvironment'))]",
    "azureBastionPublicIpAddressName": "[format('pip-{0}-bastion001', parameters('appEnvironment'))]",
    "azureFirewallName": "[format('fw-{0}-001', parameters('appEnvironment'))]",
    "azureFirewallPublicIpAddressName": "[format('pip-{0}-fw001', parameters('appEnvironment'))]",
    "azureSqlprivateDnsZoneName": "[format('privatelink{0}', environment().suffixes.sqlServerHostname)]",
    "connectionName": "[format('cn-{0}-vgw001', parameters('appEnvironment'))]",
    "internetRouteTableName": "[format('route-{0}-internet', parameters('appEnvironment'))]",
    "localNetworkGatewayName": "[format('lgw-{0}-vgw001', parameters('appEnvironment'))]",
    "natGatewayName": "[format('ngw-{0}-001', parameters('appEnvironment'))]",
    "natGatewayPublicIPPrefixName": "[format('pipp-{0}-ngw001', parameters('appEnvironment'))]",
    "networkWatcherResourceGroupName": "NetworkWatcherRG",
    "nsgFlowLogsStorageAccountName": "[replace(format('sa-{0}-nsgflow', parameters('appEnvironment')), '-', '')]",
    "tags": {
      "deploymentDate": "[parameters('deploymentDate')]",
      "owner": "[parameters('ownerName')]"
    },
    "virtualNetwork001Name": "[format('vnet-{0}-001', parameters('appEnvironment'))]",
    "virtualNetwork001Prefix": "10.101.0.0/16",
    "virtualNetwork002Name": "[format('vnet-{0}-002', parameters('appEnvironment'))]",
    "virtualNetwork002Prefix": "10.102.0.0/16",
    "vpnGatewayName": "[format('vpng-{0}-001', parameters('appEnvironment'))]",
    "vpnGatewayPublicIpAddressName": "[format('pip-{0}-vgw001', parameters('appEnvironment'))]",
    "networkSecurityGroups": "[variables('$fxv#0')]",
    "virtualNetwork001Subnets": "[variables('$fxv#1')]",
    "virtualNetwork002Subnets": "[variables('$fxv#2')]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "storageAccountNsgFlowLogsDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', format('log-{0}-001', parameters('appEnvironment')))]"
          },
          "storageAccountName": {
            "value": "[variables('nsgFlowLogsStorageAccountName')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "14498219794216918904"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location for all resources."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Log Analytics Workspace."
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Storage Account."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The list of Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/tableServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/queueServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "StorageV2",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "accessTier": "Hot",
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[format('{0}-diagnostics', parameters('storageAccountName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-blob-diagnostics', parameters('storageAccountName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": true
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": true
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-table-diagnostics', parameters('storageAccountName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": true
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": true
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-file-diagnostics', parameters('storageAccountName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": true
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": true
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-queue-diagnostics', parameters('storageAccountName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": true
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": true
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "natGatewayDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "natGatewayName": {
            "value": "[variables('natGatewayName')]"
          },
          "natGatewayPublicIPPrefixName": {
            "value": "[variables('natGatewayPublicIPPrefixName')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "11419800476216034652"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location for all resources."
              }
            },
            "natGatewayName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Nat Gateway."
              }
            },
            "natGatewayPublicIPPrefixName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Nat Gateway Public IP Prefix."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The list of Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPPrefixes",
              "apiVersion": "2022-01-01",
              "name": "[parameters('natGatewayPublicIPPrefixName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "prefixLength": 31,
                "publicIPAddressVersion": "IPv4"
              }
            },
            {
              "type": "Microsoft.Network/natGateways",
              "apiVersion": "2022-01-01",
              "name": "[parameters('natGatewayName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "idleTimeoutInMinutes": 4,
                "publicIpPrefixes": [
                  {
                    "id": "[resourceId('Microsoft.Network/publicIPPrefixes', parameters('natGatewayPublicIPPrefixName'))]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPPrefixes', parameters('natGatewayPublicIPPrefixName'))]"
              ]
            }
          ],
          "outputs": {
            "natGatewayId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/natGateways', parameters('natGatewayName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "networkSecurityGroupsDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "diagnosticsStorageAccountId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.Storage/storageAccounts', replace(format('sa-{0}-diags', parameters('appEnvironment')), '-', ''))]"
          },
          "eventHubNamespaceAuthorizationRuleId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.EventHub/namespaces/authorizationRules', split(format('evh-{0}-diagnostics/RootManageSharedAccessKey', parameters('appEnvironment')), '/')[0], split(format('evh-{0}-diagnostics/RootManageSharedAccessKey', parameters('appEnvironment')), '/')[1])]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', format('log-{0}-001', parameters('appEnvironment')))]"
          },
          "networkSecurityGroups": {
            "value": "[variables('networkSecurityGroups')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "15967596756337351283"
            }
          },
          "parameters": {
            "diagnosticsStorageAccountId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Diagnostics Storage Account."
              }
            },
            "eventHubNamespaceAuthorizationRuleId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Event Hub Namespace Authorization Rule."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location for all resources."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Log Analytics Workspace."
              }
            },
            "networkSecurityGroups": {
              "type": "array",
              "metadata": {
                "description": "The array of Network Security Group names and properties."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The list of Resource tags"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "nsg",
                "count": "[length(parameters('networkSecurityGroups'))]"
              },
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-01-01",
              "name": "[parameters('networkSecurityGroups')[copyIndex()].name]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": "[parameters('networkSecurityGroups')[copyIndex()].properties]"
            },
            {
              "copy": {
                "name": "nsgDiagnostics",
                "count": "[length(parameters('networkSecurityGroups'))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('networkSecurityGroups')[copyIndex()].name)]",
              "name": "[format('{0}-diagnostics', parameters('networkSecurityGroups')[copyIndex()].name)]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "storageAccountId": "[parameters('diagnosticsStorageAccountId')]",
                "eventHubAuthorizationRuleId": "[parameters('eventHubNamespaceAuthorizationRuleId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "NetworkSecurityGroupEvent",
                    "enabled": true
                  },
                  {
                    "category": "NetworkSecurityGroupRuleCounter",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups')[copyIndex()].name)]"
              ]
            }
          ],
          "outputs": {
            "networkSecurityGroupProperties": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('networkSecurityGroups'))]",
                "input": {
                  "name": "[parameters('networkSecurityGroups')[copyIndex()].name]",
                  "resourceId": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups')[copyIndex()].name)]"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "routeTableDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "internetRouteTableName": {
            "value": "[variables('internetRouteTableName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "7431976799975063941"
            }
          },
          "parameters": {
            "internetRouteTableName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Route Table."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The list of Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2022-01-01",
              "name": "[parameters('internetRouteTableName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "routes": [
                  {
                    "name": "toInternet",
                    "properties": {
                      "addressPrefix": "0.0.0.0/0",
                      "nextHopType": "VirtualAppliance",
                      "nextHopIpAddress": "10.101.0.4"
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "internetRouteTableId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/routeTables', parameters('internetRouteTableName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "virtualNetworkDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "diagnosticsStorageAccountId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.Storage/storageAccounts', replace(format('sa-{0}-diags', parameters('appEnvironment')), '-', ''))]"
          },
          "eventHubNamespaceAuthorizationRuleId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.EventHub/namespaces/authorizationRules', split(format('evh-{0}-diagnostics/RootManageSharedAccessKey', parameters('appEnvironment')), '/')[0], split(format('evh-{0}-diagnostics/RootManageSharedAccessKey', parameters('appEnvironment')), '/')[1])]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', format('log-{0}-001', parameters('appEnvironment')))]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "virtualNetwork001Name": {
            "value": "[variables('virtualNetwork001Name')]"
          },
          "virtualNetwork001Prefix": {
            "value": "[variables('virtualNetwork001Prefix')]"
          },
          "virtualNetwork001Subnets": {
            "value": "[variables('virtualNetwork001Subnets')]"
          },
          "virtualNetwork002Name": {
            "value": "[variables('virtualNetwork002Name')]"
          },
          "virtualNetwork002Prefix": {
            "value": "[variables('virtualNetwork002Prefix')]"
          },
          "virtualNetwork002Subnets": {
            "value": "[variables('virtualNetwork002Subnets')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "7265474912387378888"
            }
          },
          "parameters": {
            "diagnosticsStorageAccountId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Diagnostics Storage Account."
              }
            },
            "eventHubNamespaceAuthorizationRuleId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Event Hub Namespace Authorization Rule."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location for all resources."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Log Analytics Workspace."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The list of Resource tags"
              }
            },
            "virtualNetwork001Name": {
              "type": "string",
              "metadata": {
                "description": "The name of Virtual Network 001."
              }
            },
            "virtualNetwork001Prefix": {
              "type": "string",
              "metadata": {
                "description": "The address prefix of Virtual Network 001."
              }
            },
            "virtualNetwork001Subnets": {
              "type": "array",
              "metadata": {
                "description": "The array of properties for Virtual Networks 001 Subnets."
              }
            },
            "virtualNetwork002Name": {
              "type": "string",
              "metadata": {
                "description": "The name of Virtual Network 002."
              }
            },
            "virtualNetwork002Prefix": {
              "type": "string",
              "metadata": {
                "description": "The address prefix of Virtual Network 002."
              }
            },
            "virtualNetwork002Subnets": {
              "type": "array",
              "metadata": {
                "description": "The array of properties for Virtual Networks 002 Subnets."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('virtualNetwork001Name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(parameters('virtualNetwork001Subnets'))]",
                    "input": {
                      "name": "[parameters('virtualNetwork001Subnets')[copyIndex('subnets')].name]",
                      "properties": "[parameters('virtualNetwork001Subnets')[copyIndex('subnets')].properties]"
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('virtualNetwork001Prefix')]"
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('virtualNetwork001Name'))]",
              "name": "[format('{0}-diagnostics', parameters('virtualNetwork001Name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "storageAccountId": "[parameters('diagnosticsStorageAccountId')]",
                "eventHubAuthorizationRuleId": "[parameters('eventHubNamespaceAuthorizationRuleId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "VMProtectionAlerts",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork001Name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('virtualNetwork002Name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(parameters('virtualNetwork002Subnets'))]",
                    "input": {
                      "name": "[parameters('virtualNetwork002Subnets')[copyIndex('subnets')].name]",
                      "properties": "[parameters('virtualNetwork002Subnets')[copyIndex('subnets')].properties]"
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('virtualNetwork002Prefix')]"
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('virtualNetwork002Name'))]",
              "name": "[format('{0}-diagnostics', parameters('virtualNetwork002Name'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "storageAccountId": "[parameters('diagnosticsStorageAccountId')]",
                "eventHubAuthorizationRuleId": "[parameters('eventHubNamespaceAuthorizationRuleId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "VMProtectionAlerts",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork002Name'))]"
              ]
            }
          ],
          "outputs": {
            "azureBastionSubnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork001Name'), 'AzureBastionSubnet')]"
            },
            "azureFirewallSubnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork001Name'), 'AzureFirewallSubnet')]"
            },
            "gatewaySubnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork001Name'), 'GatewaySubnet')]"
            },
            "virtualNetwork001Id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork001Name'))]"
            },
            "virtualNetwork002Id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork002Name'))]"
            }
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('deployAzureFirewall'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "azureFirewallDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "azureFirewallName": {
            "value": "[variables('azureFirewallName')]"
          },
          "azureFirewallPublicIpAddressName": {
            "value": "[variables('azureFirewallPublicIpAddressName')]"
          },
          "azureFirewallSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')).outputs.azureFirewallSubnetId.value]"
          },
          "diagnosticsStorageAccountId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.Storage/storageAccounts', replace(format('sa-{0}-diags', parameters('appEnvironment')), '-', ''))]"
          },
          "eventHubNamespaceAuthorizationRuleId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.EventHub/namespaces/authorizationRules', split(format('evh-{0}-diagnostics/RootManageSharedAccessKey', parameters('appEnvironment')), '/')[0], split(format('evh-{0}-diagnostics/RootManageSharedAccessKey', parameters('appEnvironment')), '/')[1])]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', format('log-{0}-001', parameters('appEnvironment')))]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "11047610285443262907"
            }
          },
          "parameters": {
            "azureFirewallName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Firewall"
              }
            },
            "azureFirewallPublicIpAddressName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Firewall Public IP Address."
              }
            },
            "azureFirewallSubnetId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Azure Firewall Subnet."
              }
            },
            "diagnosticsStorageAccountId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Diagnostics Storage Account."
              }
            },
            "eventHubNamespaceAuthorizationRuleId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Event Hub Namespace Authorization Rule."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location for all resources."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Log Analytics Workspace."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The list of Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[parameters('azureFirewallPublicIpAddressName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publicIPAllocationMethod": "Static"
              },
              "sku": {
                "name": "Standard"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('azureFirewallPublicIpAddressName'))]",
              "name": "[format('{0}-diagnostics', parameters('azureFirewallPublicIpAddressName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "storageAccountId": "[parameters('diagnosticsStorageAccountId')]",
                "eventHubAuthorizationRuleId": "[parameters('eventHubNamespaceAuthorizationRuleId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "DDoSProtectionNotifications",
                    "enabled": true
                  },
                  {
                    "category": "DDoSMitigationFlowLogs",
                    "enabled": true
                  },
                  {
                    "category": "DDoSMitigationReports",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('azureFirewallPublicIpAddressName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/azureFirewalls",
              "apiVersion": "2022-01-01",
              "name": "[parameters('azureFirewallName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "IpConf",
                    "properties": {
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('azureFirewallPublicIpAddressName'))]"
                      },
                      "subnet": {
                        "id": "[parameters('azureFirewallSubnetId')]"
                      }
                    }
                  }
                ],
                "applicationRuleCollections": [
                  {
                    "name": "InternetOutbound",
                    "properties": {
                      "priority": 100,
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "name": "Microsoft",
                          "protocols": [
                            {
                              "port": 80,
                              "protocolType": "Http"
                            },
                            {
                              "port": 443,
                              "protocolType": "Https"
                            }
                          ],
                          "targetFqdns": [
                            "*.microsoft.com",
                            "microsoft.com"
                          ]
                        },
                        {
                          "name": "GitHub",
                          "protocols": [
                            {
                              "port": 80,
                              "protocolType": "Http"
                            },
                            {
                              "port": 443,
                              "protocolType": "Https"
                            }
                          ],
                          "targetFqdns": [
                            "*.github.com",
                            "github.com",
                            "githubassets.com"
                          ]
                        }
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('azureFirewallPublicIpAddressName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('azureFirewallName'))]",
              "name": "[format('{0}-diagnostics', parameters('azureFirewallName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "storageAccountId": "[parameters('diagnosticsStorageAccountId')]",
                "eventHubAuthorizationRuleId": "[parameters('eventHubNamespaceAuthorizationRuleId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "AzureFirewallApplicationRule",
                    "enabled": true
                  },
                  {
                    "category": "AzureFirewallNetworkRule",
                    "enabled": true
                  },
                  {
                    "category": "AzureFirewallDnsProxy",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/azureFirewalls', parameters('azureFirewallName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "azureBastionDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "azureBastionName": {
            "value": "[variables('azureBastionName')]"
          },
          "azureBastionPublicIpAddressName": {
            "value": "[variables('azureBastionPublicIpAddressName')]"
          },
          "azureBastionSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')).outputs.azureBastionSubnetId.value]"
          },
          "diagnosticsStorageAccountId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.Storage/storageAccounts', replace(format('sa-{0}-diags', parameters('appEnvironment')), '-', ''))]"
          },
          "eventHubNamespaceAuthorizationRuleId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.EventHub/namespaces/authorizationRules', split(format('evh-{0}-diagnostics/RootManageSharedAccessKey', parameters('appEnvironment')), '/')[0], split(format('evh-{0}-diagnostics/RootManageSharedAccessKey', parameters('appEnvironment')), '/')[1])]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', format('log-{0}-001', parameters('appEnvironment')))]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "18101463104756922444"
            }
          },
          "parameters": {
            "azureBastionName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Bastion"
              }
            },
            "azureBastionPublicIpAddressName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Bastion Public IP Address."
              }
            },
            "azureBastionSubnetId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Azure Bastion Subnet."
              }
            },
            "diagnosticsStorageAccountId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Diagnostics Storage Account."
              }
            },
            "eventHubNamespaceAuthorizationRuleId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Event Hub Namespace Authorization Rule."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location for all resources."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Log Analytics Workspace."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The list of Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[parameters('azureBastionPublicIpAddressName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publicIPAllocationMethod": "Static"
              },
              "sku": {
                "name": "Standard"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('azureBastionPublicIpAddressName'))]",
              "name": "[format('{0}-diagnostics', parameters('azureBastionPublicIpAddressName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "storageAccountId": "[parameters('diagnosticsStorageAccountId')]",
                "eventHubAuthorizationRuleId": "[parameters('eventHubNamespaceAuthorizationRuleId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "DDoSProtectionNotifications",
                    "enabled": true
                  },
                  {
                    "category": "DDoSMitigationFlowLogs",
                    "enabled": true
                  },
                  {
                    "category": "DDoSMitigationReports",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('azureBastionPublicIpAddressName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2022-01-01",
              "name": "[parameters('azureBastionName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipConf",
                    "properties": {
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('azureBastionPublicIpAddressName'))]"
                      },
                      "subnet": {
                        "id": "[parameters('azureBastionSubnetId')]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('azureBastionPublicIpAddressName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('azureBastionName'))]",
              "name": "[format('{0}-diagnostics', parameters('azureBastionName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "storageAccountId": "[parameters('diagnosticsStorageAccountId')]",
                "eventHubAuthorizationRuleId": "[parameters('eventHubNamespaceAuthorizationRuleId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "BastionAuditLogs",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/bastionHosts', parameters('azureBastionName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[equals(parameters('deployVpnGateway'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "vpnGatewayDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "connectionName": {
            "value": "[variables('connectionName')]"
          },
          "connectionSharedKey": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('securityResourceGroupName')), 'Microsoft.KeyVault/vaults', format('kv-{0}-001', parameters('appEnvironment')))]"
              },
              "secretName": "resourcePassword"
            }
          },
          "diagnosticsStorageAccountId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.Storage/storageAccounts', replace(format('sa-{0}-diags', parameters('appEnvironment')), '-', ''))]"
          },
          "eventHubNamespaceAuthorizationRuleId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.EventHub/namespaces/authorizationRules', split(format('evh-{0}-diagnostics/RootManageSharedAccessKey', parameters('appEnvironment')), '/')[0], split(format('evh-{0}-diagnostics/RootManageSharedAccessKey', parameters('appEnvironment')), '/')[1])]"
          },
          "gatewaySubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')).outputs.gatewaySubnetId.value]"
          },
          "localNetworkGatewayAddressPrefix": {
            "value": "[parameters('localNetworkGatewayAddressPrefix')]"
          },
          "localNetworkGatewayName": {
            "value": "[variables('localNetworkGatewayName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', format('log-{0}-001', parameters('appEnvironment')))]"
          },
          "sourceAddressPrefix": {
            "value": "[parameters('sourceAddressPrefix')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "vpnGatewayName": {
            "value": "[variables('vpnGatewayName')]"
          },
          "vpnGatewayPublicIpAddressName": {
            "value": "[variables('vpnGatewayPublicIpAddressName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "12742109641284429057"
            }
          },
          "parameters": {
            "connectionName": {
              "type": "string",
              "metadata": {
                "description": "The name of the VPN Connection."
              }
            },
            "connectionSharedKey": {
              "type": "secureString",
              "metadata": {
                "description": "The value for the VPN Connection Shared Key."
              }
            },
            "diagnosticsStorageAccountId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Diagnostics Storage Account."
              }
            },
            "eventHubNamespaceAuthorizationRuleId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Event Hub Namespace Authorization Rule."
              }
            },
            "gatewaySubnetId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Gateway Subnet."
              }
            },
            "localNetworkGatewayAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The address prefix of the on-premises network."
              }
            },
            "localNetworkGatewayName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Local Network Gateway"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location for all resources."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Log Analytics Workspace."
              }
            },
            "sourceAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The public IP address of the on-premises network."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The list of Resource tags"
              }
            },
            "vpnGatewayName": {
              "type": "string",
              "metadata": {
                "description": "The name of the VPN Gateway."
              }
            },
            "vpnGatewayPublicIpAddressName": {
              "type": "string",
              "metadata": {
                "description": "The name of the VPN Gateway Public IP Address."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[parameters('vpnGatewayPublicIpAddressName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publicIPAllocationMethod": "Dynamic"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('vpnGatewayPublicIpAddressName'))]",
              "name": "[format('{0}-diagnostics', parameters('vpnGatewayPublicIpAddressName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "storageAccountId": "[parameters('diagnosticsStorageAccountId')]",
                "eventHubAuthorizationRuleId": "[parameters('eventHubNamespaceAuthorizationRuleId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "DDoSProtectionNotifications",
                    "enabled": true
                  },
                  {
                    "category": "DDoSMitigationFlowLogs",
                    "enabled": true
                  },
                  {
                    "category": "DDoSMitigationReports",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('vpnGatewayPublicIpAddressName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/localNetworkGateways",
              "apiVersion": "2022-01-01",
              "name": "[parameters('localNetworkGatewayName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "localNetworkAddressSpace": {
                  "addressPrefixes": [
                    "[parameters('localNetworkGatewayAddressPrefix')]"
                  ]
                },
                "gatewayIpAddress": "[parameters('sourceAddressPrefix')]"
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworkGateways",
              "apiVersion": "2022-01-01",
              "name": "[parameters('vpnGatewayName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "gatewayType": "Vpn",
                "ipConfigurations": [
                  {
                    "name": "default",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('gatewaySubnetId')]"
                      },
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('vpnGatewayPublicIpAddressName'))]"
                      }
                    }
                  }
                ],
                "vpnType": "RouteBased",
                "sku": {
                  "name": "Basic",
                  "tier": "Basic"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('vpnGatewayPublicIpAddressName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "name": "[format('{0}-diagnostics', parameters('vpnGatewayName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "storageAccountId": "[parameters('diagnosticsStorageAccountId')]",
                "eventHubAuthorizationRuleId": "[parameters('eventHubNamespaceAuthorizationRuleId')]",
                "logAnalyticsDestinationType": "Dedicated",
                "logs": [
                  {
                    "category": "GatewayDiagnosticLog",
                    "enabled": true
                  },
                  {
                    "category": "TunnelDiagnosticLog",
                    "enabled": true
                  },
                  {
                    "category": "RouteDiagnosticLog",
                    "enabled": true
                  },
                  {
                    "category": "IKEDiagnosticLog",
                    "enabled": true
                  },
                  {
                    "category": "P2SDiagnosticLog",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('vpnGatewayName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/connections",
              "apiVersion": "2022-01-01",
              "name": "[parameters('connectionName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "virtualNetworkGateway1": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('vpnGatewayName'))]",
                  "properties": {}
                },
                "localNetworkGateway2": {
                  "id": "[resourceId('Microsoft.Network/localNetworkGateways', parameters('localNetworkGatewayName'))]",
                  "properties": {}
                },
                "connectionType": "IPsec",
                "routingWeight": 10,
                "sharedKey": "[parameters('connectionSharedKey')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/localNetworkGateways', parameters('localNetworkGatewayName'))]",
                "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('vpnGatewayName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[equals(parameters('deployVpnGateway'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "vnetPeeringVgwDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualNetwork001Id": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')).outputs.virtualNetwork001Id.value]"
          },
          "virtualNetwork001Name": {
            "value": "[variables('virtualNetwork001Name')]"
          },
          "virtualNetwork002Id": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')).outputs.virtualNetwork002Id.value]"
          },
          "virtualNetwork002Name": {
            "value": "[variables('virtualNetwork002Name')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "3225308612463402307"
            }
          },
          "parameters": {
            "virtualNetwork001Id": {
              "type": "string",
              "metadata": {
                "description": "The ID of Virtual Network 001."
              }
            },
            "virtualNetwork001Name": {
              "type": "string",
              "metadata": {
                "description": "The name of Virtual Network 001."
              }
            },
            "virtualNetwork002Id": {
              "type": "string",
              "metadata": {
                "description": "The ID of Virtual Network 002."
              }
            },
            "virtualNetwork002Name": {
              "type": "string",
              "metadata": {
                "description": "The name of Virtual Network 002."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}-{2}', parameters('virtualNetwork001Name'), parameters('virtualNetwork001Name'), parameters('virtualNetwork002Name'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": true,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[parameters('virtualNetwork002Id')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}-{2}', parameters('virtualNetwork002Name'), parameters('virtualNetwork002Name'), parameters('virtualNetwork001Name'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": true,
                "remoteVirtualNetwork": {
                  "id": "[parameters('virtualNetwork001Id')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "condition": "[equals(parameters('deployVpnGateway'), false())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "vnetPeeringNoVgwDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualNetwork001Id": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')).outputs.virtualNetwork001Id.value]"
          },
          "virtualNetwork001Name": {
            "value": "[variables('virtualNetwork001Name')]"
          },
          "virtualNetwork002Id": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')).outputs.virtualNetwork002Id.value]"
          },
          "virtualNetwork002Name": {
            "value": "[variables('virtualNetwork002Name')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "3497446629206956729"
            }
          },
          "parameters": {
            "virtualNetwork001Id": {
              "type": "string",
              "metadata": {
                "description": "The ID of Virtual Network 001."
              }
            },
            "virtualNetwork001Name": {
              "type": "string",
              "metadata": {
                "description": "The name of Virtual Network 001."
              }
            },
            "virtualNetwork002Id": {
              "type": "string",
              "metadata": {
                "description": "The ID of Virtual Network 002."
              }
            },
            "virtualNetwork002Name": {
              "type": "string",
              "metadata": {
                "description": "The name of Virtual Network 002."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}-{2}', parameters('virtualNetwork001Name'), parameters('virtualNetwork001Name'), parameters('virtualNetwork002Name'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[parameters('virtualNetwork002Id')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}-{2}', parameters('virtualNetwork002Name'), parameters('virtualNetwork002Name'), parameters('virtualNetwork001Name'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[parameters('virtualNetwork001Id')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "privateDnsDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePrivateDnsZoneName": {
            "value": "[variables('appServicePrivateDnsZoneName')]"
          },
          "azureSqlPrivateDnsZoneName": {
            "value": "[variables('azureSqlprivateDnsZoneName')]"
          },
          "virtualNetwork001Id": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')).outputs.virtualNetwork001Id.value]"
          },
          "virtualNetwork001Name": {
            "value": "[variables('virtualNetwork001Name')]"
          },
          "virtualNetwork002Id": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')).outputs.virtualNetwork002Id.value]"
          },
          "virtualNetwork002Name": {
            "value": "[variables('virtualNetwork002Name')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "15099057594486698638"
            }
          },
          "parameters": {
            "appServicePrivateDnsZoneName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure App Service Private DNS Zone."
              }
            },
            "azureSqlPrivateDnsZoneName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Sql Private DNS Zone."
              }
            },
            "virtualNetwork001Id": {
              "type": "string",
              "metadata": {
                "description": "The ID of Virtual Network 001."
              }
            },
            "virtualNetwork001Name": {
              "type": "string",
              "metadata": {
                "description": "The name of Virtual Network 001."
              }
            },
            "virtualNetwork002Id": {
              "type": "string",
              "metadata": {
                "description": "The ID of Virtual Network 002."
              }
            },
            "virtualNetwork002Name": {
              "type": "string",
              "metadata": {
                "description": "The name of Virtual Network 002."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The list of Resource tags"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('appServicePrivateDnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('azureSqlPrivateDnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}-link', parameters('appServicePrivateDnsZoneName'), parameters('virtualNetwork001Name'))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('virtualNetwork001Id')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('appServicePrivateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}-link', parameters('appServicePrivateDnsZoneName'), parameters('virtualNetwork002Name'))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('virtualNetwork002Id')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('appServicePrivateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}-link', parameters('azureSqlPrivateDnsZoneName'), parameters('virtualNetwork001Name'))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('virtualNetwork001Id')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('azureSqlPrivateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}-link', parameters('azureSqlPrivateDnsZoneName'), parameters('virtualNetwork002Name'))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('virtualNetwork002Id')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('azureSqlPrivateDnsZoneName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtualNetworkDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "nsgFlowLogsDeployment",
      "resourceGroup": "[variables('networkWatcherResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managementResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', format('log-{0}-001', parameters('appEnvironment')))]"
          },
          "networkSecurityGroupProperties": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')).outputs.networkSecurityGroupProperties.value]"
          },
          "nsgFlowLogsStorageAccountId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageAccountNsgFlowLogsDeployment')).outputs.storageAccountId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "9774911837719506105"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location for all resources."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Log Analytics Workspace."
              }
            },
            "networkSecurityGroupProperties": {
              "type": "array",
              "metadata": {
                "description": "The array of Network Security properties."
              }
            },
            "nsgFlowLogsStorageAccountId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Network Security Group Flow Logs Storage Account."
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "nsgFlowLog",
                "count": "[length(parameters('networkSecurityGroupProperties'))]"
              },
              "type": "Microsoft.Network/networkWatchers/flowLogs",
              "apiVersion": "2022-01-01",
              "name": "[format('NetworkWatcher_{0}/{1}', parameters('location'), parameters('networkSecurityGroupProperties')[copyIndex()].name)]",
              "location": "[parameters('location')]",
              "properties": {
                "targetResourceId": "[parameters('networkSecurityGroupProperties')[copyIndex()].resourceId]",
                "storageId": "[parameters('nsgFlowLogsStorageAccountId')]",
                "enabled": true,
                "flowAnalyticsConfiguration": {
                  "networkWatcherFlowAnalyticsConfiguration": {
                    "enabled": true,
                    "workspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                    "trafficAnalyticsInterval": 10
                  }
                },
                "retentionPolicy": {
                  "days": 7,
                  "enabled": true
                },
                "format": {
                  "type": "JSON",
                  "version": 2
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networkSecurityGroupsDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'storageAccountNsgFlowLogsDeployment')]"
      ]
    }
  ]
}