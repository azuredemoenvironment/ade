# log analytics
$location='eastus'
$resourceGroupName='rg-ade-mitaric-eus-loganalytics'
az group create -l $location -n $resourceGroupName
$file='./log_analytics.bicep'
az deployment group create -g $resourceGroupName -f $file

# policy
$location='eastus'
$file='./policy.bicep'
az deployment sub create -l $location -f $file

# activity log
$location='eastus'
$file='./activity_log.bicep'
az deployment sub create -l $location -f $file

# key vault
$location='eastus'
$resourceGroupName='rg-ade-mitaric-eus-keyvault'
az group create -l $location -n $resourceGroupName
$file='./key_vault.bicep'
az deployment group create -g $resourceGroupName -f $file

# key vault secret set
$keyVaultName='kv-ade-mitaric-eus-001'
$secretName='resourcePassword'
$secretValue='BM@6Q%ph#jk8'
az keyvault secret set -n $secretName --vault-name $keyVaultName --value $secretValue

# key vault key set
$keyVaultName='kv-ade-mitaric-eus-001'
$keyVaultKeyName='containerRegistry'
az keyvault key create --vault-name $keyVaultName -n $keyVaultKeyName --kty RSA --size 2048

# key vault certificate upload (certificate)
$keyVaultName='kv-ade-mitaric-eus-001'
$wildcardCertificatePath='/home/mitaric/repos/azure-demo-environment-dev/data/wildcard.pfx'
$wildcardCertificatePassword='HhRvLt81AQ^n'
az keyvault certificate import --vault-name $keyVaultName --name 'pfx-certificate' --file $wildcardCertificatePath --password $wildcardCertificatePassword

# key vault certificate upload (secret)
Login-AzAccount
$pfxCertificateFilePath = "/home/mitaric/repos/azure-demo-environment-dev/data/wildcard.pfx"
$pfxCertificatePassword = "HhRvLt81AQ^n"
$flag = [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable
$collection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
$collection.Import($pfxCertificateFilePath, $pfxCertificatePassword, $flag)
$pkcs12ContentType = [System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12
$clearBytes = $collection.Export($pkcs12ContentType)
$fileContentEncoded = [System.Convert]::ToBase64String($clearBytes)
$secret = ConvertTo-SecureString -String $fileContentEncoded -AsPlainText -force
$secretContentType = 'application/x-pkcs12'
$keyVaultName = 'kv-ade-mitaric-eus-001'
$keyVaultSecretName = 'certificate'
Set-AzKeyVaultSecret -VaultName $keyVaultName -Name $keyVaultSecretName -SecretValue $secret -ContentType $secretContentType

# create user assigned managed identities
# create resource group
$managedIdentityResourceGroupName = 'rg-ade-mitaric-eus-managedidentity'
$location = 'eastus'
az group create -n $managedIdentityResourceGroupName -l $location

# create container registry user assigned managed identity
$managedIdentityResourceGroupName = 'rg-ade-mitaric-eus-managedidentity'
$crManagedIdentityName = 'uami-ade-mitaric-eus-cr'
az identity create -g $managedIdentityResourceGroupName -n $crManagedIdentityName

# create application gateway user assigned managed identity
$managedIdentityResourceGroupName = 'rg-ade-mitaric-eus-managedidentity'
$appGWManagedIdentityName = 'uami-ade-mitaric-eus-appgw'
az identity create -g $managedIdentityResourceGroupName -n $appGWManagedIdentityName

# assign user assigned managed identities to key vault
# assign container registry user assigned managed identity to key vault
$keyVaultResourceGroupName = 'rg-ade-mitaric-eus-keyvault'
$keyVaultName = 'kv-ade-mitaric-eus-001'
$managedIdentityResourceGroupName = 'rg-ade-mitaric-eus-managedidentity'
$crManagedIdentityName = 'uami-ade-mitaric-eus-cr'
$crManagedIdentitySPNID = az identity show -g $managedIdentityResourceGroupName -n $crManagedIdentityName --query principalId
az keyvault set-policy -g $keyVaultResourceGroupName -n $keyVaultName --object-id $crManagedIdentitySPNID --key-permissions get unwrapKey wrapKey

# assign application gateway user assigned managed identity to key vault
$keyVaultResourceGroupName = 'rg-ade-mitaric-eus-keyvault'
$keyVaultName = 'kv-ade-mitaric-eus-001'
$managedIdentityResourceGroupName = 'rg-ade-mitaric-eus-managedidentity'
$appGWManagedIdentityName = 'uami-ade-mitaric-eus-appgw'
$appGWManagedIdentitySPNID = az identity show -g $managedIdentityResourceGroupName -n $appGWManagedIdentityName --query principalId
az keyvault set-policy -g $keyVaultResourceGroupName -n $keyVaultName --object-id $appGWManagedIdentitySPNID --secret-permissions get

# assign azure app service service principal to key vault
$keyVaultResourceGroupName = 'rg-ade-mitaric-eus-keyvault'
$keyVaultName = 'kv-ade-mitaric-eus-001'
$appServiceSPN = 'abfa0a7c-a6b6-4736-8310-5855508787cd'
az keyvault set-policy -g $keyVaultResourceGroupName -n $keyVaultName --spn $appServiceSPN --secret-permissions get --certificate-permissions get

# create service principals
# create rest api service principal
$keyVaultResourceGroupName='rg-ade-mitaric-eus-keyvault'
$keyVaultName='kv-ade-mitaric-eus-001'
$restAPISPNName = 'spn-ade-mitaric-eus-restapi'
$restAPISPNPassword=az ad sp create-for-rbac -n http://$restAPISPNName --query password --output tsv
$restAPISPNAppID=az ad sp show --id http://$restAPISPNName --query appId --output tsv
$restAPISPNObjectID=az ad sp show --id http://$restAPISPNName --query objectId --output tsv
$userSecretName='restAPIUserName'
$passwordSecretName='restAPIPassword'
$objectIdSecretName='restAPIObjectId'
az keyvault secret set --vault-name $keyVaultName -n $userSecretName --value $restAPISPNAppID
az keyvault secret set --vault-name $keyVaultName -n $passwordSecretName --value $restAPISPNPassword
az keyvault secret set --vault-name $keyVaultName -n $objectIdSecretName --value $restAPISPNObjectID
echo "$restAPISPNAppID"
echo "$restAPISPNPassword"
echo "$restAPISPNObjectID"

# create github actions servie principal
$keyVaultResourceGroupName='rg-ade-mitaric-eus-keyvault'
$keyVaultName='kv-ade-mitaric-eus-001'
$ghaSPNName = 'spn-ade-mitaric-eus-gha'
$ghaSPNPassword=az ad sp create-for-rbac -n http://$ghaSPNName --query password --output tsv
$ghaSPNAppID=az ad sp show --id http://$ghaSPNName --query appId --output tsv
$ghaSPNObjectID=az ad sp show --id http://$ghaSPNName --query objectId --output tsv
$userSecretName='ghaUserName'
$passwordSecretName='ghaPassword'
$objectIdSecretName='ghaObjectId'
az keyvault secret set --vault-name $keyVaultName -n $userSecretName --value $ghaSPNAppID
az keyvault secret set --vault-name $keyVaultName -n $passwordSecretName --value $ghaSPNPassword
az keyvault secret set --vault-name $keyVaultName -n $objectIdSecretName --value $ghaSPNObjectID
echo "$ghaSPNAppID"
echo "$ghaSPNPassword"
echo "$ghaSPNObjectID"

# create container registry service principal
$keyVaultResourceGroupName='rg-ade-mitaric-eus-keyvault'
$keyVaultName='kv-ade-mitaric-eus-001'
$crSPNName='spn-ade-mitaric-eus-cr'
$crSPNPassword=az ad sp create-for-rbac -n http://$crSPNName --skip-assignment true --role acrpull --query password --output tsv
$crSPNAppID=az ad sp show --id http://$crSPNName --query appId --output tsv
$crSPNObjectID=az ad sp show --id http://$crSPNName --query objectId --output tsv
$userSecretName='containerRegistryUserName'
$passwordSecretName='containerRegistryPassword'
$objectIdSecretName='containerRegistryObjectId'
az keyvault secret set --vault-name $keyVaultName -n $userSecretName --value $crSPNAppID
az keyvault secret set --vault-name $keyVaultName -n $passwordSecretName --value $crSPNPassword
az keyvault secret set --vault-name $keyVaultName -n $objectIdSecretName --value $crSPNObjectID
echo "$crSPNAppID"
echo "$crSPNPassword"
echo "$crSPNObjectID"

./ade.ps1 -deploy -alias 'mitaric' -email 'mitaric@outlook.com' -rootDomainName "mitaric.com" -resourceUserName 'resourceadmin' -resourcePassword 'BM@6Q%ph#jk8' -certificatePassword 'HhRvLt81AQ^n' -localNetworkRange '192.168.0.0/24' -skipConfirmation -overwriteParameterFiles